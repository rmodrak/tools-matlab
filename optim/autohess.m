function H = autohess(grad,x,opt,varargin)%AUTOHESS numerical Hessian%       Forward - forward differences%       Central - centered differences (more accurate, but requires more %                 gradient evaluations)%       Complex - complex-step derivative (most accurate, but only works %                 for certain objective functions)defval('opt','Forward')nn = length(x);switch opt    case 'Forward'        mu = 2*sqrt(1e-12)*(1+norm(x));        g = grad(x,varargin{:});        delta = zeros(nn);        for j = 1:nn            e_j = zeros(nn,1);            e_j(j) = 1;            delta(:,j) = grad(x + mu*e_j,varargin{:});        end        H = (delta-repmat(g,[1 nn]))/mu;    case 'Centered'        mu = 2*sqrt(1e-9)*(1+norm(x));        f1 = zeros(nn,1);        f2 = zeros(nn,1);        delta1 = zeros(nn);        delta2 = zeros(nn);        for j = 1:nn            e_j = zeros(nn,1);            e_j(j) = 1;            delta1(:,j) = grad(x + mu*e_j,varargin{:});            delta2(:,j) = grad(x - mu*e_j,varargin{:});        end        g = mean([delta1 delta2],2);        H = (delta1-delta2)/(2*mu);    case 'Complex'        mu = 1e-150;        delta = zeros(nn);        for j = 1:nn            e_j = zeros(nn,1);            e_j(j) = 1;            delta(:,j) = grad(x + mu*i*e_j,varargin{:});        end        g = mean(real(delta),2);        H = imag(delta)/mu;end% ensure Hessian is symmetric%H = (H+H')/2;